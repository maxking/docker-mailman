name: Build Docker Images

description: |
  This action builds Docker images for multiple platforms using docker buildx.

inputs:
  image_name:
    description: 'Name of the Docker image (e.g., mailman-core, mailman-web, postorius)'
    required: true
  commit_id:
    description: 'Git commit hash to tag the image'
    required: true
  tag_ns:
    description: 'DockerHub namespace (e.g., your-dockerhub-username)'
    required: true
  dockerfile_path:
    description: 'Path to the Dockerfile'
    required: true
  build_dir:
    description: 'Directory of the build context'
    required: true
  alpine_version:
    description: 'Alpine version to use in the Dockerfile'
    required: true

runs:
  using: "composite"
  steps:
    - name: Determine commit and version info
      id: meta
      shell: bash
      run: |
        set -e
        echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          VERSION="0.5.2"

        if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
          RAW_TAG="${GITHUB_REF##*/}"
          VERSION="${RAW_TAG#v}"
        fi

        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

        echo "version_full=$VERSION" >> $GITHUB_OUTPUT
        echo "version_major=$MAJOR" >> $GITHUB_OUTPUT
        echo "version_minor=${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT
        echo "version_patch=$PATCH" >> $GITHUB_OUTPUT

    - name: Build Rolling Release for ${{ inputs.platform }}
      shell: bash
      run: |
        set -e
        build_date=$(date +%Y%m%d)

        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --label version.git_commit="${{ steps.meta.outputs.commit_id }}" \
          --build-arg ALPINE_VERSION="${{ inputs.alpine_version }}" \
          -t "${{ inputs.tag_ns }}/${{ inputs.image_name }}:rolling-${build_date}-alpine${{ inputs.alpine_version }}" \
          -f "${{ inputs.dockerfile_path }}" "${{ inputs.build_dir }}" \
          --push

    - name: Tag and Push Versioned Images
      shell: bash
      run: |
        set -e
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          safe_platform="${{ inputs.platform }}"
          safe_platform="${safe_platform//\//-}"

          for version_tag in "${{ steps.meta.outputs.version_full }}" "${{ steps.meta.outputs.version_minor }}"; do
            echo "Tagging and pushing: $version_tag"
            docker buildx build \
              --platform "${{ inputs.platform }}" \
              --label version.git_commit="${{ steps.meta.outputs.commit_id }}" \
              --build-arg ALPINE_VERSION="${{ inputs.alpine_version }}" \
              -t "${{ inputs.tag_ns }}/${{ inputs.image_name }}:${safe_platform}-${version_tag}" \
              -f "${{ inputs.dockerfile_path }}" "${{ inputs.build_dir }}" \
              --push
          done
        else
          echo "No git tag detected; skipping versioned image tagging."
        fi
