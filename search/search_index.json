{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GNU Mailman 3 Deployment with Docker","text":"<p>This repository hosts code for two docker images <code>maxking/mailman-core</code> and <code>maxking/mailman-web</code> both of which are meant to deploy GNU Mailman 3 in a production environment.</p> <p>Docker is a container ecosystem which can run containers on several platforms. It consists of a tool called docker-compose which can be used to run multi-container applications. This repository consists of a <code>docker-compose.yaml</code> file which is a set of configurations that can be used to deploy the Mailman 3 Suite.</p> <p>Please see release page for the releases and change log.</p>"},{"location":"#release","title":"Release","text":"<p>The tags for the images are assumed to be release versions for images. This is going to be a somewhat common philosophy of distributing Container images where the images with same tags are usually updated with the new functionality.</p> <p>Releases will follow the following rules:</p> <ul> <li> <p>Images tagged like A.B.C will never change. If you want to pin down versions   of Images, use these tags.</p> </li> <li> <p>Images tagged with A.B will correspond to the latest A.B.C version   released. Releases in A.B series are supposed to be backwards compatible,   i.e., any existing installation should not break when upgrading between   subversions of A.B.C. So, if you want the latest updates and want to   frequently update your installation without having to change the version   numbers, you can use this.</p> </li> <li> <p>Any changes in the minor version of Mailman components of the images will   cause a bump in the minor version, e.g., A.(B+1) can have one or more   updated Mailman components from A.B. Also, significant change in functionality,   that might change how Images work or how people interact with the containers   can also cause a bump in the minor version.</p> </li> <li> <p>Major versions will change either when there are backwards incompatible   changes or when the releases reach a certain set milestone or when there are   bugfix releases for the internal components or both.</p> </li> </ul>"},{"location":"#container-registries","title":"Container Registries","text":"<p>The container images are available from multiple container registries. Do specify an explicit version tag (e.g. <code>0.4.5</code> , MAJOR.MINOR like <code>0.4</code> also works as floating tag pointing to latest patch version) as tag <code>latest</code> is not updated anymore.</p>"},{"location":"#mailman-core","title":"Mailman Core","text":"<ul> <li><code>ghcr.io/maxking/mailman-core</code></li> <li><code>docker.io/maxking/mailman-core</code></li> </ul>"},{"location":"#mailman-web","title":"Mailman Web","text":"<ul> <li><code>ghcr.io/maxking/mailman-web</code></li> <li><code>docker.io/maxking/mailman-web</code></li> </ul>"},{"location":"#postorius","title":"Postorius","text":"<ul> <li><code>ghcr.io/maxking/postorius</code></li> <li><code>docker.io/maxking/postorius</code></li> </ul>"},{"location":"#rolling-releases","title":"Rolling Releases","text":"<p>Rolling releases are made up of Mailman Components installed from git source. Note that these releases are made up of un-released software and should be assumed to be beta quality.</p> <p>Every commit is tested with Mailman's CI infrastructure and is included in rolling releases only if they have passed the complete test suite.</p> <pre><code>$ docker pull docker.io/maxking/mailman-web:rolling\n$ docker pull docker.io/maxking/mailman-core:rolling\n</code></pre> <p>Rolling releases are built with every commit and also re-generated nightly. You can inspect the images to get which commit it was built using:</p> <pre><code>$ docker inspect --format '{{json .Config.Labels }}' mailman-core | python -m json.tool\n{\n    \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\",\n}\n\n$ docker inspect --format '{{json .Config.Labels }}' mailman-web | python -m json.tool\n{\n    \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\",\n}\n\n</code></pre> <ul> <li><code>version.git_commit</code> : This is the commit hash of the Dockerfile in the   Github repo</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Docker</li> <li>Docker-compose-plugin</li> </ul> <p>To install these on Ubuntu/Debian:</p> <pre><code>$ sudo apt install docker.io docker-compose-plugin\n</code></pre> <p>For other systems, you can read the official Docker documentation to install Docker from here and docker compose from here.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>Most of the common configuration is handled through environment variables in the <code>docker-compose.yaml</code>. However, there is need for some extra configuration that interacts directly with the application. There are two configuration files on the host that interact directly with Mailman's settings. These files exist on the host running the containers and are imported at runtime in the containers.</p> <ul> <li> <p><code>/opt/mailman/core/mailman-extra.cfg</code> : This is the configuration for Mailman   Core and anything that you add here will be added to Core's configuration. You   need to restart your mailman-core container for the changes in this file to   take effect.</p> </li> <li> <p><code>/opt/mailman/web/settings_local.py</code> : This is the Django configuration that   is imported by the existing configuration   provided by the mailman-web container. This file is referred to as   <code>settings.py</code> in most of the Postorius and Django documentation. To change   or override any settings in Django/Postorius, you need to create/edit this file.   A useful configuration for troubleshooting is <code>DEBUG = True</code>.</p> </li> </ul> <p>Also, note that if you need any other files to be accessible from the host to inside the container, you can place them at certain directories which are mounted inside the containers.</p> <ul> <li><code>/opt/mailman/core</code> in host maps to <code>/opt/mailman/</code> in mailman-core container.</li> <li><code>/opt/mailman/web</code> in host maps to <code>/opt/mailman-web-data</code> in mailman-web    container.</li> </ul>"},{"location":"#mailman-web_1","title":"Mailman-web","text":"<p>These are the settings that you MUST change in your docker-compose.yaml before deploying:</p> <ul> <li> <p><code>SERVE_FROM_DOMAIN</code>: The domain name from which Django will be served. To be   added to <code>ALLOWED_HOSTS</code> in django settings. Default value is not set. This   also replaces Django's default <code>example.com</code> SITE and becomes the default SITE   (with SITE_ID=1).</p> </li> <li> <p><code>HYPERKITTY_API_KEY</code>: Hyperkitty's API Key, should be set to the same value   as set for the mailman-core. (Not needed in case of Postorius-only version.)</p> </li> <li> <p><code>MAILMAN_ADMIN_USER</code>: The username for the admin user to be created by default.</p> </li> <li> <p><code>MAILMAN_ADMIN_EMAIL</code>: The email for the admin user to be created by default.</p> </li> <li> <p><code>SECRET_KEY</code>: Django's secret key, mainly used for signing cookies and others.</p> </li> </ul> <p>Please note here that if you choose to create the admin user using the environment variables mentioned above (<code>MAILMAN_ADMIN_USER</code> &amp; <code>MAILMAN_ADMIN_EMAIL</code>), no password is set for your admin account. To set a password, plese follow the \"Forgot Password\" link on the \"Sign In\" page.</p> <p>Mailman web is already configured to send emails through <code>$SMTP_HOST</code> as the MTA's address. If you want to modify it, you can set the value in under docker-compose.yaml for mailman-web container. By default, <code>SMTP_HOST</code> points to the gateway of the web container, which is the host itself.</p> <p>You can also use the environment variables <code>SMTP_HOST</code> (defaults to the container's gateway), <code>SMTP_PORT</code> (defaults to <code>25</code>), <code>SMTP_HOST_USER</code> (defaults to an empty string), <code>SMTP_HOST_PASSWORD</code> (defaults to an empty string), <code>SMTP_USE_TLS</code> (defaults to <code>False</code>) and <code>SMTP_USE_SSL</code> (defaults to <code>False</code>).</p> <p>This is required in addition to the Setup your MTA section below, which covers email setup for Mailman Core.</p> <p>For more details on how to configure this image, please look at Mailman-web's Readme</p>"},{"location":"#mailman-core_1","title":"Mailman-Core","text":"<p>These are the variables that you MUST change in your docker-compose.yaml before deploying:</p> <ul> <li> <p><code>HYPERKITTY_API_KEY</code>: Hyperkitty's API Key, should be set to the same value as   set for the mailman-web. Skip the variable in case of non-Hyperkitty deployment.</p> </li> <li> <p><code>DATABASE_URL</code>: URL of the type   <code>driver://user:password@hostname:port/databasename</code> for the django to use. If   not set, the default is set to   <code>sqlite:///opt/mailman-web-data/mailmanweb.db</code>. The standard   docker-compose.yaml comes with it set to a postgres database. There is no need   to change this if you are happy with PostgreSQL.</p> </li> <li> <p><code>DATABASE_TYPE</code>: Its value can be one of <code>sqlite</code>, <code>postgres</code> or <code>mysql</code> as   these are the only three database types that Mailman 3 supports. Its default   value is set to <code>sqlite</code> along with the default database class and default   database url above.</p> </li> <li> <p><code>DATABASE_CLASS</code>: Default value is   <code>mailman.database.sqlite.SQLiteDatabase</code>. The values for this can be found in   the mailman's documentation here.</p> </li> <li><code>SMTP_HOST</code>   : outgoing host for SMTP connections</li> <li><code>SMTP_PORT</code>   : use this port. 25, 587, whatever your host asks for.</li> <li><code>SMTP_HOST_USER</code>: authenticate this user</li> <li><code>SMTP_HOST_PASSWORD</code>: and use this password</li> <li><code>SMTP_SECURE_MODE</code>: security mode for smtp connection - can be <code>smtp</code> (no encryption), <code>smtps</code> or <code>starttls</code></li> <li><code>SMTP_VERIFY_HOSTNAME</code>: defaults to <code>true</code> - verify, that certificate hostname is identical to <code>SMTP_HOST</code></li> <li><code>SMTP_VERIFY_CERT</code>: defaults to <code>true</code> - verify, that certificate is valid</li> </ul> <p>For more details on how to configure this image, please look Mailman-core's Readme</p> <p>While the above configuration will allow you to run the images and possibly view the Web Frontend, it won't be functional until it is fully configured to to send emails.</p> <p>To configure the mailman-core container to send emails, see the Setting your MTA section below.</p>"},{"location":"#running","title":"Running","text":"<p>To run the containers, simply run:</p> <pre><code>$ mkdir -p /opt/mailman/core\n$ mkdir -p /opt/mailman/web\n$ git clone https://github.com/maxking/docker-mailman\n$ cd docker-mailman\n# Change some configuration variables as mentioned above.\n$ docker compose up -d\n</code></pre> <p>Note that the web frontend in the mailman-web container is, by default, only configured to serve dynamic content. Anything static like stylesheets, etc., is expected to be served directly by the web server. The static content exists at <code>/opt/mailman/web/static</code> and should be aliased to <code>/static/</code> in the web server configuration.</p> <p>See the nginx configuration as an example.</p> <p>This command will do several things, most importantly:</p> <ul> <li> <p>Run a wsgi server using <code>uwsgi</code> for the Mailman's Django-based web   frontend listening on port 8000. It will run 2 worker   processes with 4 threads each. You may want to change the setting   <code>ALLOWED_HOSTS</code> in the settings before deploying the application in   production.</p> </li> <li> <p>Run a PostgreSQL server with a default database, username, and password as   mentioned in the <code>docker-compose.yaml</code>. You will have to change configuration   files too if you change any of these.</p> </li> <li> <p>Run mailman-core listening on port 8001 for REST API and port 8024 (LMTP   server) for messages from your MTA. You will have to configure your MTA to   send messages at this address.</p> </li> </ul> <p>Some more details about what the above system achieves is mentioned below. If you are only going to deploy a simple configuration, you don't need to read this. However, these are very easy to understand if you know how docker works.</p> <ul> <li> <p>First create a bridge network called <code>mailman</code> in the   <code>docker-compose.yaml</code>. It will probably be named something else in your   machine. All the containers   mentioned (mailman-core, mailman-web, database) will join this network and are   assigned static IPs. The host operating system is the default gateway   from within these containers.</p> </li> <li> <p>Spin off a mailman-core container attached to the mailman bridge network created above. It has   GNU Mailman 3 core running inside it. Mailman core's REST API is available at   port 8001 and LMTP server listens at port 8024.</p> </li> <li> <p>Spin off a mailman-web container which has a Django application running with   both Mailman's web frontend Postorius and Mailman's web-based Archiver   running. Uwsgi server is used to run a web server with the configuration   provided in this repository here. You may want to   change the setting <code>ALLOWED_HOSTS</code> in the settings before deploying the   application in production. You can do that by adding a   <code>/opt/mailman/web/settings_local.py</code> which is imported by the Django when   running.</p> </li> <li> <p>Spin off a PostgreSQL database container which is used by both mailman-core   and mailman-web as their primary database.</p> </li> <li> <p>mailman-core mounts <code>/opt/mailman/core</code> from host OS at <code>/opt/mailman</code> in the   container. Mailman's var directory is stored there so that it is accessible   from the host operating system. Configuration for Mailman core is generated on   every run from the environment variables provided. Extra configuration can   also be provided at <code>/opt/mailman/core/mailman-extra.cfg</code> (on host), and will   be added to generated configuration file. Mailman also needs another   configuration file called   mailman-hyperkitty.cfg and is also   expected to be at <code>/opt/mailman/core/</code> on the host OS.</p> </li> <li> <p>mailman-web mounts <code>/opt/mailman/web</code> from the host OS to   <code>/opt/mailman-web-data</code> in the container. It consists of the logs and   settings_local.py file for Django.</p> </li> <li> <p>database mounts <code>/opt/mailman/database</code> at <code>/var/lib/postgresql/data</code> so that   PostgreSQL can persist its data even if the database containers are   updated/changed/removed.</p> </li> </ul>"},{"location":"#setting-up-your-mta","title":"Setting up your MTA","text":"<p>The provided docker containers do not have an MTA in-built. You can either run your own MTA inside a container and have them relay emails to the mailman-core container or just install an MTA on the host and have them relay emails.</p>"},{"location":"#exim4","title":"Exim4","text":"<p>To use Exim4, it should be setup to relay emails from mailman-core and mailman-web. The mailman specific configuration is provided in the repository at <code>core/assets/exim</code>. There are three files</p> <ul> <li> <p>25_mm3_macros to be placed at   <code>/etc/exim4/conf.d/main/25_mm3_macros</code> in a typical Debian install of   exim4. Please change MY_DOMAIN_NAME to the domain name that will be used to   serve mailman. Multi-domain setups will be added later.</p> </li> <li> <p>455_mm3_router to be placed at   <code>/etc/exim4/conf.d/router/455_mm3_router</code> in a typical Debian install of exim4.</p> </li> <li> <p>55_mm3_transport to be placed at   <code>/etc/exim4/conf.d/transport/55_mm3_transport</code> in a typical Debian install of exim4.</p> </li> </ul> <p>Also, the default configuration inside the mailman-core image has the MTA set to Exim, but just for reference, it looks like this:</p> <pre><code># mailman.cfg\n[mta]\nincoming: mailman.mta.exim4.LMTP\noutgoing: mailman.mta.deliver.deliver\nlmtp_host: $MM_HOSTNAME\nlmtp_port: 8024\nsmtp_host: $SMTP_HOST\nsmtp_port: $SMTP_PORT\nconfiguration: python:mailman.config.exim4\n</code></pre>"},{"location":"#postfix","title":"Postfix","text":"<p>To use Postfix, edit the <code>main.cf</code> configuration file, which is typically at <code>/etc/postfix/main.cf</code> on Debian-based operating systems.  Add mailman-core and mailman-web to <code>mynetworks</code> so it will relay emails from the containers and add the following configuration lines:</p> <pre><code># main.cf\n\n# Support the default VERP delimiter.\nrecipient_delimiter = +\nunknown_local_recipient_reject_code = 550\nowner_request_special = no\n\ntransport_maps =\n    regexp:/opt/mailman/core/var/data/postfix_lmtp\nlocal_recipient_maps =\n    regexp:/opt/mailman/core/var/data/postfix_lmtp\nrelay_domains =\n    regexp:/opt/mailman/core/var/data/postfix_domains\n</code></pre> <p>To configure Mailman to use Postfix, add <code>MTA=postfix</code> under mailman-core's environment section in the <code>docker-compose.yaml</code>:</p> <pre><code>  mailman-core:\n    &lt;snip&gt;\n    environment:\n    - MTA=postfix\n</code></pre> <p>This will auto-generate the configuration to talk to Postfix assuming that Postfix is available at the gateway address for the container's bridge network at port 25. The final configuration can be found by executing:</p> <pre><code>$ docker exec mailman-core cat /etc/mailman.cfg\n</code></pre> <p>The postfix configuration that is generated looks like this:</p> <pre><code>[mta]\nincoming: mailman.mta.postfix.LMTP\noutgoing: mailman.mta.deliver.deliver\nlmtp_host: $MM_HOSTNAME\nlmtp_port: 8024\nsmtp_host: $SMTP_HOST\nsmtp_port: $SMTP_PORT\nconfiguration: /etc/postfix-mailman.cfg\n</code></pre> <p>So, if you need to update the values, you can set <code>SMTP_HOST</code>, <code>SMTP_PORT</code>, <code>MM_HOSTNAME</code> environment variables in <code>mailman-core</code> container.</p> <p>Please verify the output for <code>[mta]</code> section to ensure that it points to the right <code>smtp_host</code> (address to reach postfix from mailman-core container) and <code>lmtp_host</code> (address to reach mailman-core container from postfix).</p> <p>The configuration file <code>/etc/postfix-mailman.cfg</code> is also generated automatically inside the <code>mailman-core</code> container and contains the configuration specific for Postfix.</p>"},{"location":"#site-owner","title":"Site Owner","text":"<p>Setup site owner address. By default, mailman is setup with the site_owner set to 'changeme@example.com'. This should be pointing to a valid mailbox. Add the following to the '/opt/mailman/core/mailman-extra.cfg'.</p> <pre><code>[mailman]\n# This address is the \"site owner\" address.  Certain messages which must be\n# delivered to a human, but which can't be delivered to a list owner (e.g. a\n# bounce from a list owner), will be sent to this address.  It should point to\n# a human.\nsite_owner: changeme@example.com\n</code></pre>"},{"location":"#setting-up-search-indexing","title":"Setting up search indexing","text":"<p>Hyperkitty in mailman-web image support full-text indexing. The current default indexing engine is Whoosh for historical reasons. It is highly recommended that you instead use Xapian for production use cases. The default will change when the next major version bump happens.</p> <p>To configure your Mailman-web container to use Xapian, add the following to your <code>settings_local.py</code>:</p> <pre><code>HAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'xapian_backend.XapianEngine',\n        'PATH': \"/opt/mailman-web-data/fulltext_index\",\n    },\n}\n</code></pre> <p>If you have been using the default search indexing engine, you might have to re-index emails using the following command:</p> <pre><code>$ docker compose exec mailman-web ./manage.py rebuild_index\n</code></pre> <p>This command can take some time if you a lot of emails, so please be patient!</p>"},{"location":"#setting-up-your-web-server","title":"Setting up your web server","text":"<p>It is advisable to run your Django (interfaced through WSGI server) through an actual webserver in production for better performance.</p> <p>If you are using v0.1.0, the uwsgi server is configured to listen to requests at port <code>8000</code> using the <code>HTTP</code> protocol. Make sure that you preserve the <code>HOST</code> header when you proxy the requests from your Web Server. In Nginx you can do that by adding the following to your configuration:</p> <pre><code>    # Nginx configuration.\n    location /static {\n        alias /opt/mailman/web/static;\n        autoindex off;\n    }\n\n    location / {\n          proxy_pass http://127.0.0.1:8000;\n          include uwsgi_params;\n          uwsgi_read_timeout 300;\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n    }\n\n</code></pre> <p>Make sure you are using <code>proxy_pass</code> for the <code>HTTP</code> protocol.</p>"},{"location":"#uwsgi","title":"uwsgi","text":"<p>Starting from v0.1.1, the uwsgi server is configured to listen to requests at port <code>8000</code> with the http protocol and port <code>8080</code> for the uwsgi protocol.</p> <p>Please make sure that you are using port 8080 for uwsgi protocol.</p> <p>It is advised to use the uwsgi protocol as it has better performance. Both Apache and Nginx have native support for the uwsgi protocol through plugins which are generally included in the distro packages.</p> <p>To move to uwsgi protocol in the above nginx configuration use this</p> <pre><code>    # Nginx configuration.\n    location /static {\n        alias /opt/mailman/web/static;\n        autoindex off;\n    }\n\n    location / {\n          uwsgi_pass localhost:8080;\n          include uwsgi_params;\n          uwsgi_read_timeout 300;\n    }\n</code></pre> <p>Please make sure that you are using v0.1.1 or greater if you use this configuration.</p>"},{"location":"#serving-static-files","title":"Serving static files","text":"<p>UWSGI by default doesn't serve static files so, when running <code>mailman-web</code> using the provided <code>docker-compose.yaml</code> file, you won't see any CSS or JS files being served.</p> <p>To enable serving of static files using UWSGI, add the following environment variable to your <code>docker-compose.yaml</code> file under <code>mailman-web</code>:</p> <pre><code>UWSGI_STATIC_MAP=/static=/opt/mailman-web-data/static\n</code></pre> <p>It is recommended to use web-server to serve static files instead of UWSGI for better performance. You will have to add an alias rule in your web server to serve the static files. See here for instructions on how to configure your web server. The STATIC_ROOT for you would be <code>/opt/mailman/web/static</code>.</p>"},{"location":"#ssl-certificates","title":"SSL certificates","text":"<p>SSL Certificates from Lets Encrypt need to be renewed every 90 days. You can setup a cron job to do the job. I have this small shell script (certbot-renew.sh) that you can put up in <code>/etc/cron.monthly</code> to get the job done.</p> <pre><code>#! /bin/bash\n\ncd /opt/letsencrypt/\n./certbot-auto --config /etc/letsencrypt/renewal/MY_DOMAIN_NAME.conf certonly\n\nif [ $? -ne 0 ]\n then\n        ERRORLOG=`tail /var/log/letsencrypt/letsencrypt.log`\n        echo -e \"The Let's Encrypt cert has not been renewed! \\n \\n\" \\\n                 $ERRORLOG\n else\n        nginx -s reload\nfi\n\nexit 0\n</code></pre> <p>Please do not forget to make the script executable (<code>chmod +x certbot-renew.sh</code>).</p>"},{"location":"#license","title":"LICENSE","text":"<p>This repository is licensed under the MIT License. Please see the LICENSE file for more details.</p>"},{"location":"core/","title":"Mailman3 Core Docker Image","text":"<p>When you spawn off this container, you must mount <code>/opt/mailman</code> to the container. Mailman's <code>var</code> directory will also be stored here so that it can persist across different sessions and containers. Any configuration at <code>/opt/mailman/core/mailman-extra.cfg</code> (on the host) will be added to the mailman's default generated confifguration (see below).</p> <p>It is not advised to run multiple mailman processes on the same host sharing the same <code>/opt/mailman</code> (<code>/opt/mailman/core</code> on the host) directory as this will almost certainly be dangerous.</p>"},{"location":"core/#configuration","title":"Configuration","text":"<p>These are the variables that you MUST change before deploying:</p> <ul> <li> <p><code>HYPERKITTY_API_KEY</code>: Hyperkitty's API Key, should be set to the same value as   set for the mailman-core.</p> </li> <li> <p><code>DATABASE_URL</code>: URL of the type   <code>driver://user:password@hostname:port/databasename</code> for the django to use. If   not set, the default is set to   <code>sqlite:///opt/mailman-web-data/mailmanweb.db</code>. The standard   docker-compose.yaml comes with it set to a postgres database. It is not must   to change this if you are happy with PostgreSQL.</p> </li> <li> <p><code>DATABASE_TYPE</code>: Its value can be one of <code>sqlite</code>, <code>postgres</code> or <code>mysql</code> as   these are the only three database types that Mailman 3 supports. Its default   value is set to <code>sqlite</code> along with the default database class and default   database url above.</p> </li> <li> <p><code>DATABASE_CLASS</code>: Default value is   <code>mailman.database.sqlite.SQLiteDatabase</code>. The values for this can be found in   the mailman's documentation [here][11].</p> </li> </ul> <p>These are the variables that you don't need to change if you are using a standard version of docker-compose.yaml from this repository.</p> <ul> <li> <p><code>MM_HOSTNAME</code>: Which hostname or IP should Core bind to for REST API and   LMTP. If not defined output from the <code>hostname -i</code> command is used.</p> </li> <li> <p><code>MAILMAN_REST_PORT</code>: Which port should Core use for the REST API. If not defined   the default is <code>8001</code>.</p> </li> <li> <p><code>MAILMAN_REST_USER</code>: Which username should Core use for the REST API. If not   defined the default is <code>restadmin</code>.</p> </li> <li> <p><code>MAILMAN_REST_PASSWORD</code>: Which password should Core use for the REST API. If   not defined the default is <code>restpass</code>.</p> </li> <li> <p><code>MTA</code>: Mail Transfer Agent to use. Either <code>exim</code> or <code>postfix</code>. Default value is <code>exim</code>.</p> </li> <li> <p><code>SMTP_HOST</code>: IP Address/hostname from which you will be sending   emails. Default value is the container's gateway retrieved from:     /sbin/ip route | awk '/default/ { print $3 }'</p> </li> <li> <p><code>SMTP_PORT</code>: Port used for SMTP. Default is <code>25</code>.</p> </li> <li> <p><code>SMTP_SECURE_MODE</code>: Security mode (encryption) used for SMTP. Default is <code>smtp</code>. Can also be <code>starttls</code> or <code>smtps</code>.</p> </li> <li> <p><code>HYPERKITTY_URL</code>: Default value is <code>http://mailman-web:8000/hyperkitty</code></p> </li> </ul> <p>In case of a need for fine tuning of REST API web-server that uses Gunicorn (e.g. for raising of timeouts) <code>/opt/mailman/core/gunicorn-extra.cfg</code> file could be provided holding necessary configuration options.</p> <p>Configuration file, shipped with Mailman Core, is used by default.</p> <p>For example, to increase the default 30 sec timeout, which won't work for some API calls to highly populated lists, provide the following <code>gunicorn-extra.cfg</code> file:</p> <pre><code>[gunicorn]\ngraceful_timeout = 30\ntimeout = 300\n</code></pre>"},{"location":"core/#running-mailman-core","title":"Running Mailman-Core","text":"<p>It is highly recomended that you run this image along with the docker-compose.yaml file provided at the github repo of this image. However, it is possible to run this image as a standalone container if you want just a mailman-core.</p> <pre><code>$ mkdir -p /opt/mailman/core\n$ docker run -it -e \"HYPERKITTY_API_KEY=changeme\" -h mailman-core -v /opt/mailman/core:/opt/mailman mailman-core\n</code></pre> <p>However, if you don't provide the environment <code>DATABASE_URL</code>, the database may not be persisted. All the configuration options are explained in more detail.</p> <p>If you need mode advanced configuration for mailman, you can create <code>/opt/mailman/mailman.cfg</code> and it be added to the configuration inside the container. Note that anything inside this configuration will override the settings provided via the environment variables and their default values.</p> <p>By default, the following settings are generated:</p> <pre><code># mailman.cfg\n[mta]\nincoming: mailman.mta.exim4.LMTP\noutgoing: mailman.mta.deliver.deliver\nlmtp_host: $MM_HOSTNAME\nlmtp_port: 8024\nsmtp_host: $SMTP_HOST\nsmtp_port: $SMTP_PORT\nsmtp_secure_mode: $SMTP_SECURE_MODE\nsmtp_verify_hostname: $SMTP_VERIFY_HOSTNAME\nsmtp_verify_cert: $SMTP_VERIFY_CERT\nconfiguration: python:mailman.config.exim4\n\n[runner.retry]\nsleep_time: 10s\n\n[webservice]\nhostname: $MM_HOSTNAME\nport: $MAILMAN_REST_PORT\nadmin_user: $MAILMAN_REST_USER\nadmin_pass: $MAILMAN_REST_PASSWORD\nconfiguration: /etc/gunicorn.cfg\n\n[archiver.hyperkitty]\nclass: mailman_hyperkitty.Archiver\nenable: yes\nconfiguration: /etc/mailman-hyperkitty.cfg\n\n[database]\nclass: $DATABASE_CLASS\nurl: $DATABASE_URL\n</code></pre> <pre><code># mailman-hyperkitty.cfg\n[general]\nbase_url: $HYPERKITTY_URL\napi_key: $HYPERKITTY_API_KEY\n</code></pre>"},{"location":"core/#mta","title":"MTA","text":"<p>You can use Postfix or Exim with this image to send emails. Mailman Core can interact with any modern MTA which can deliver emails over LMTP. The documentation for Mailman Core has configuration settigs for using them.</p> <p>Only Exim and Postfix have been tested with these images and are supported as of now. There might be some limitations with using other MTAs in a containerized environments. Contributions are welcome for anything additional needed to support other MTAs.</p> <p>To setup Exim or Posfix, checkout the documentation.</p>"},{"location":"news/","title":"NEWS","text":""},{"location":"news/#upgrading-to-040-release","title":"Upgrading to 0.4.0 Release","text":"<p>Some configurations in the release are backwards incompatible with what was working before. </p>"},{"location":"news/#web-server-configuration","title":"Web server configuration","text":"<p>With 0.4.0 version, we added Port mapping from host's Port 8000/8080 to mailman-web container's port 8000/8080. Make sure you have this in your docker-compose.yaml</p> <pre><code>  mailman-web:\n    ports:\n    - \"127.0.0.1:8000:8000\" # HTTP\n    - \"127.0.0.1:8080:8080\" # uwsgi\n</code></pre> <p>You should update your web server to proxy 127.0.0.1:8000.</p>"},{"location":"news/#nginx","title":"Nginx","text":"<p>Update the Nginx configuration to look like this, notice the actual URL for <code>proxy_pass</code> is the only thing that has changed along with some options like <code>uwsgi_read_timeout</code> and <code>include uwsgi_params</code> that have been removed from the previous version.</p> <pre><code>    location / {\n          proxy_pass http://127.0.0.1:8000;\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n    }\n</code></pre> <p>For other web servers like Apache2, update the URL accordingly.</p> <p>Note that if you are using <code>uwsgi_pass</code> instead of <code>proxy_pass</code> then you should update the URL accordingly to <code>https://127.0.0.1:8080</code>.</p>"},{"location":"news/#mta-configuration","title":"MTA configuration","text":"<p>MTA configuration needs updating to ensure that all IPs from the  <code>172.19.199.0/24</code> subnet is added to <code>mynetworks</code> in Postfix configs.</p> <p>Please verify that the network configuration generated by the containers look like this:</p> <pre><code>$ docker exec mailman-core cat /etc/mailman.cfg\n# This file is autogenerated at container startup.\n[database]\nclass: mailman.database.postgresql.PostgreSQLDatabase\nurl: postgres://mailman:mailmanpass@database/mailmandb\n[runner.retry]\nsleep_time: 10s\n\n[webservice]\nhostname: 172.19.199.3\nport: 8001\nadmin_user: restadmin\nadmin_pass: restpass\nconfiguration: /etc/gunicorn.cfg\n\n[mta]\nincoming: mailman.mta.postfix.LMTP\noutgoing: mailman.mta.deliver.deliver\nlmtp_host: 172.19.199.3\nlmtp_port: 8024\nsmtp_host: 172.19.199.1\nsmtp_port: 25\nconfiguration: /etc/postfix-mailman.cfg\n\n[archiver.hyperkitty]\nclass: mailman_hyperkitty.Archiver\nenable: yes\nconfiguration: /etc/mailman-hyperkitty.cfg\n</code></pre> <p>Note that lmtp_host and webserver hostname can be different than  before since new containers don't have static IP addresses. They  are automatically parsed from the output of \"ip route\" command  from inside mailman-core container.</p> <p>You can verify that the IP address of the containers by running the following commands, note that the output can be different and it is fine if that is the case.</p> <pre><code>$ docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mailman-core\n172.19.199.3\n$ docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mailman-web\n172.19.199.4\n</code></pre>"},{"location":"news/#mailman-core","title":"Mailman Core","text":""},{"location":"news/#v111-released-aug-9-2017","title":"v1.1.1 (released Aug 9 2017)","text":"<ul> <li>The MM_HOSTNAME now defaults to output of <code>hostname -i</code> instead of <code>mailman-core</code>. This   is the hostname Core binds to for Webservice.</li> <li>Added pymysql to the image to use MySQL as database.</li> <li>The default settings for using SQLITE are now more sane.</li> <li>Postfix's transport maps are generated at the container startup now even when   there is no lists exist.</li> </ul>"},{"location":"news/#mailman-web","title":"Mailman Web","text":""},{"location":"news/#v111-released-aug-9-2017_1","title":"v1.1.1 (released Aug 9 2017)","text":"<ul> <li>The default search_index for whoosh now exists on persistent storage at   <code>/opt/mailman-web-data</code></li> <li>Move to using Alpine instead of Debian for this image, python2.7:alpine-3.6   image is now the base image</li> <li>Django compressor is now using <code>sassc</code> from alpine repo.</li> <li>Default value of SECRET_KEY is now removed. It is MUST to set SECRET_KEY   environment variable to run this image now.</li> <li>If a SERVE_FROM_DOMAIN environment variable is defined, the default Django's   example.com site is renamed to this domain. The SITE_ID remains same so there   is no change required to serve this domain.</li> <li>If MAILMAN_ADMIN_USER and MAILMAN_ADMIN_EMAIL environment variables are   defined a Django Superuser is created by default. The password for this user   would have to be reset on the first login.</li> <li>Fix cron configuration which would run them in wrong order.</li> <li>Removed facebook as default social auth provider in the settings.py</li> <li>Uwsgi now listens on port 8080 for uwsgi protocol and 8000 for http protocol.</li> <li>Threads are enabled by default in the uwsgi configuration now.</li> <li>Hyperkitty updated to v1.1.1</li> </ul>"},{"location":"web/","title":"Mailman 3 Web UI","text":"<p>This image consists of Mailman3's Web UI(Postorius) and Archiver (Hyperkitty). This image is built from latest sources on gitlab. In future, latest and stable releases will be seperate. I am looking forward to the release of Mailman Suite 3.1 before that.</p>"},{"location":"web/#configuration","title":"Configuration","text":"<p>These are the settings that you MUST change before deploying:</p> <ul> <li> <p><code>SERVE_FROM_DOMAIN</code>: The domain name from which Django will be served. To be   added to <code>ALLOWED_HOSTS</code> in django settings. Default value is not set. This   also replaces Django's default <code>example.com</code> SITE and becomes the default SITE   (with SITE_ID=1).</p> </li> <li> <p><code>HYPERKITTY_API_KEY</code>: Hyperkitty's API Key, should be set to the same value as   set for the mailman-core.</p> </li> <li> <p><code>MAILMAN_ADMIN_USER</code>: The username for the admin user to be created by default.</p> </li> <li> <p><code>MAILMAN_ADMIN_EMAIL</code>: The email for the admin user to be created by default.</p> </li> <li> <p><code>SECRET_KEY</code>: Django's secret key, mainly used for signing cookies and others.</p> </li> </ul> <p>These are the settings that are set to sane default and you do not need to change them unless you know what you want.</p> <ul> <li> <p><code>DATABASE_URL</code>: URL of the type   <code>driver://user:password@hostname:port/databasename</code> for the django to use. If   not set, the default is set to   <code>sqlite:///opt/mailman-web-data/mailmanweb.db</code>. The standard   docker-compose.yaml comes with it set to a postgres database. It is not must   to change this if you are happy with PostgreSQL.</p> </li> <li> <p><code>MAILMAN_REST_URL</code>: The URL to the Mailman core's REST API server.  Defaut   value is <code>http://mailman-core:8001</code>.</p> </li> <li> <p><code>MAILMAN_REST_USER</code>: Mailman's REST API username. Default value is <code>restadmin</code></p> </li> <li> <p><code>MAILMAN_REST_PASSWORD</code>: Mailman's REST API user's password. Default value is   <code>restpass</code></p> </li> <li> <p><code>MAILMAN_HOSTNAME</code>: IP of the Container from which Mailman will send emails to   hyperkitty (django). Set to <code>mailman-core</code> by default.</p> </li> <li> <p><code>SMTP_HOST</code>: IP Address/hostname from which you will be sending   emails. Default value is the container's gateway retrieved from:     /sbin/ip route | awk '/default/ { print $3 }'</p> </li> <li> <p><code>SMTP_PORT</code>: Port used for SMTP. Default is <code>25</code>.</p> </li> <li> <p><code>SMTP_HOST_USER</code>: Used for SMTP authentication. Default is an empty string.</p> </li> <li> <p><code>SMTP_HOST_PASSWORD</code>: Default is an empty string.</p> </li> <li> <p><code>SMTP_USE_TLS</code>: Specifies wheather the SMTP connection is encrypted   via TLS. Default is <code>False</code>. (<code>EMAIL_USE_TLS</code>/<code>EMAIL_USE_SSL</code> are mutually exclusive, so only set one of those settings.)</p> </li> <li> <p><code>SMTP_USE_SSL</code>: Specifies wheather the SMTP connection is encrypted   via SSL. Default is <code>False</code>. (EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings.)</p> </li> <li> <p><code>DJANGO_LOG_URL</code>: Path to the django's log file. Defaults to   <code>/opt/mailman-web-data/logs/mailmanweb.log</code>.</p> </li> <li> <p><code>DJANGO_ALLOWED_HOSTS</code>: Entry to add to ALLOWED_HOSTS in Django   configuration. Format as comma-separated list (no whitespace). This is a separate configuration from<code>SERVE_FROM_DOMAIN</code> as   latter is used for other purposes too.</p> </li> <li> <p><code>POSTORIUS_TEMPLATE_BASE_URL</code>: The base url at which the <code>mailman-web</code>   container can be reached from <code>mailman-core</code> container. This is set to   <code>http://mailman-web:8000</code> by default so that Core can fetch templates from   Web.</p> </li> <li> <p><code>DISKCACHE_PATH</code> and <code>DISKCACHE_SIZE</code>: Django Diskcache location path and   size respectively. Defaults are <code>/opt/mailman-web-data/diskcache</code> and 1G.</p> </li> </ul>"},{"location":"web/#social-auth","title":"Social Auth","text":"<p>In order to separate <code>INSTALLED_APPS</code> from the social authentication plugins a new settings <code>MAILMAN_WEB_SOCIAL_AUTH</code> is created. This includes all the enabled social auth plugins.</p>"},{"location":"web/#disable-social-auth","title":"Disable social auth","text":"<p>In order to disable social auth, you can add the following to your settings_local.py</p> <pre><code>MAILMAN_WEB_SOCIAL_AUTH = []\n</code></pre> <p>In older versions of continer images (0.3.*), you had to override <code>INSTALLED_APPS</code> in order to disable social auth, but addition of this new setting will make it easier to disable social auth making sure that you get any updates to the django apps that are added in future.</p> <p>The default behavior will remain the same as 0.3 release if you have not overriden <code>INSTALLED_APPS</code> though.</p>"},{"location":"web/#running","title":"Running","text":"<p>It is highly recommended that you run this using the docker-compose.yaml provided in the github repo of this project. You will need to proxy the requests the container that you create with this image using an actual web server like Nginx. The github repo provides the setup instructions for Nginx.</p> <p>Since the setup has <code>USE_SSL</code> set to <code>True</code> in django's <code>settings.py</code>, you may also want to get a SSL certificate if you don't already have one. Lets Encrypt provides free SSL certiticates for everyone and there are some instructions about that also.</p> <p>After the first run, you can create a superuser for django using the following command:</p> <pre><code>$ docker exec -it mailman-web python3 manage.py createsuperuser\n</code></pre>"},{"location":"web/#django-management-commands","title":"Django management commands","text":"<p>In order to run Django management commands in the <code>mailman-web</code> container, you can run following:</p> <pre><code>$ docker exec -it mailman-web python3 manage.py &lt;command&gt;\n</code></pre> <p>And replace <code>&lt;command&gt;</code> with the appropriate management command.</p>"},{"location":"web/#importing-archives-from-mailman-2","title":"Importing Archives from Mailman 2","text":"<p>In order to import archvies from Mailman 2, you need to get the <code>listname.mbox</code> file in a location that is readable inside <code>mailman-web</code> container. </p> <p>Please place <code>listname.mbox</code> file at <code>/opt/mailman/web</code> on the host. Verify that the file is present inside the <code>mailman-web</code> contianer by running:</p> <pre><code>$ docker exec -it mailman-web ls /opt/mailman-web-data\n</code></pre> <p>And verify that you can see <code>listname.mbox</code> in the <code>ls</code> output above. After you  have verified that, you can then run the <code>hyperkitty_import</code> command to do the actual import:</p> <pre><code>$ docker exec -it mailman-web python3 manage.py hyperkitty_import -l listname@domain /opt/mailman-web-data/listname.mbox\n</code></pre> <p>This should take some time to import depending on how many emails are in the archives.</p>"}]}